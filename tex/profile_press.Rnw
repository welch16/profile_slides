\documentclass[table,xcolor=dvipsnames]{beamer}


\usepackage{xcolor}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{tikz}
\usetikzlibrary{shapes,arrows}
\usepackage{float}
\usepackage{/u/w/e/welch/R-3.1.0/share/texmf/tex/latex/Sweave}
\usepackage{verbatim}
\usepackage{fancyvrb}

%\usepackage{pifont}% http://ctan.org/pkg/pifont



\DefineVerbatimEnvironment{Sinput}{Verbatim}
{formatcom = {\color{Sinput}},fontsize=\scriptsize} 
\DefineVerbatimEnvironment{Soutput}{Verbatim}
{formatcom = {\color{Soutput}},fontsize=\footnotesize}
\DefineVerbatimEnvironment{Scode}{Verbatim}
{formatcom = {\color{Scode}},fontsize=\small}


\definecolor{Sinput}{rgb}{0.75,0.19,0.19}
\definecolor{Soutput}{rgb}{0,0,0}
\definecolor{Scode}{rgb}{0.75,0.19,0.19}

\usetheme{Szeged}
\usecolortheme[named=RoyalBlue]{structure}


%\usecolortheme[accent=blue]{solarized}


% Personal Data
\title{How to use the profile package}
\date{September 2014}
\author{Rene Welch}
\institute{University of Wisconsin - Madison}


\setbeamertemplate{sections/subsections in toc}[square] % This is to remove the symbols of the slides
\setbeamertemplate{navigation symbols}{} % This is to convert the "3d" spheres to squares on toc
\setbeamertemplate{itemize item}[square] % This is to convert the "3d" spheres to squares on enumerate


\DefineVerbatimEnvironment{Sinput}{Verbatim}
{formatcom = {\color{Sinput}},fontsize=\scriptsize} 
\DefineVerbatimEnvironment{Soutput}{Verbatim}
{formatcom = {\color{Soutput}},fontsize=\footnotesize}
\DefineVerbatimEnvironment{Scode}{Verbatim}
{formatcom = {\color{Scode}},fontsize=\small}




\ifdefined\knitrout
  \renewenvironment{knitrout}{\begin{footnotesize}}{\end{footnotesize}}
\else
\fi


\begin{document}

<<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(fig.align='center',fig.show='hold',size='footnotesize')
knit_hooks$set(packages = function(before, options, envir) {
  if (before) {
    ## load packages before a chunk is executed
    for (p in options$packages) library(p, character.only = TRUE)
  }
})
figsdir = "figs/generated"
@ 


\begin{frame}
  \maketitle
\end{frame}

\begin{frame}
\tableofcontents
\end{frame}


\section{A typical ChIP-Seq experiment}
\begin{frame}
\frametitle{A typical ChIP-Seq experiment}

\begin{figure}
  \includegraphics[width = .75\textwidth]{figs/fromPapers/parkOverview.png}
\caption{From Park's ChIP-seq: Advantages and challenges of a maturing technology} 
\end{figure}
\end{frame}


\begin{frame}


\only<1>{
\begin{itemize}
\item The double stranded {\color{RoyalBlue} DNA} is sonicated to obtain fragments
\end{itemize}}
\only<2>{
\begin{itemize}
\item Add antibodies to target the protein
\end{itemize}
}
\only<3>{
\begin{itemize}
\item Unlink the protein, purify the DNA
\end{itemize}}
\only<4-6>{
\begin{itemize}
\item The fragments are around (but not exactly at) the protein
\end{itemize}
}

\begin{figure}[h!]
\centering
\begin{tikzpicture}

\uncover<1->{\draw [line width=10,color=red] (0,1) -- (10,1); 
             \node [color=red] at (-.5,1) {5'};
             \node [color=red] at (10.5,1) {3'};
             \draw [line width=10,color=blue] (0,0) -- (10,0);
             \node [color=blue] at (-.5,0) {3'};
             \node [color=blue] at (10.5,0) {5'};}
\uncover<2>{\draw [color=yellow,fill=yellow] (5,1.5) circle [radius=1.5];
             \node at (5,2) {\huge{Protein}};}
\uncover<3-4>{\draw [color=yellow,fill=yellow] (5,3.5) circle [radius=1.5];
             \node at (5,4) {\huge{Protein}};}
\uncover<4->{\draw [->,line width=3,color=black] (2,-1) -- (2,0);
             \draw [->,line width=3,color=black] (3,-1) -- (3,0);
             \draw [->,line width=3,color=black] (7.5,-1) -- (7.5,0);
             \draw [->,line width=3,color=black] (6.7,-1) -- (6.7,0);
             \draw [line width=2,color=black,dashed] (2,-1) -- (2,1);
             \draw [line width=2,color=black,dashed] (3,-1) -- (3,1);
             \draw [line width=2,color=black,dashed] (7.5,-1) -- (7.5,1);
             \draw [line width=2,color=black,dashed] (6.7,-1) -- (6.7,1);}
 %             \node [color=black] at (9.5,-.5) {\large{Fragmentation}};}
\uncover<5->{\draw [->,line width=3,color=red] (2,1.5) -- (4,1.5);
             \draw [->,line width=3,color=red] (3,1.8) -- (5,1.8);
             \draw [->,line width=3,color=blue] (7.5,1.5) -- (5.5,1.5);
             \draw [->,line width=3,color=blue] (6.7,2.3) -- (4.7,2.3);}
\uncover<6->{\draw [line width=3,color=red] (3.3,2) -- (5.3,2);
             \draw [line width=3,color=red] (2.5,1.6) -- (4.5,1.6);
             \draw [line width=3,color=red] (3.7,2.2) -- (5.7,2.2);
             \draw [line width=3,color=blue] (5.3,1.7) -- (7.3,1.7);
             \draw [line width=3,color=blue] (4.5,2.5) -- (6.5,2.5);}

\end{tikzpicture}
\end{figure}
\end{frame}



<<sim, packages=c('GenomicRanges', 'ggplot2'),include=FALSE,echo=FALSE,eval=FALSE>>=
peaksim <- function(nreads,mu,p,delta,sigma2,readLength)
{  
  strand = runif(nreads) >  p  # TRUE means Fwd, FALSE means Bwd
  fwd_pos = sum(strand)
  bwd_pos = nreads - fwd_pos
  fwd_start = round(rnorm(fwd_pos,mu - delta, sd = sqrt(sigma2)),0)
  bwd_start = round(rnorm(bwd_pos,mu + delta, sd = sqrt(sigma2)),0)
  peakReads = c(
    GRanges(seqnames = "sim",ranges = IRanges(start = fwd_start,width = readLength),strand = "+"),
    GRanges(seqnames = "sim",ranges = IRanges(end = bwd_start,width = readLength),strand = "-")
    )  
  return(peakReads)
}

plotPeak <- function(peak,m)
{
  fwd_reads = suppressWarnings(subset(peak,subset = strand(peak)=="+"))
  bwd_reads = suppressWarnings(subset(peak,subset = strand(peak)=="-"))
  fwd_cov = coverage(fwd_reads)[[1]]
  bwd_cov = coverage(bwd_reads)[[1]]  
  x = 1:m
  fwd_xp = runLength(fwd_cov)[1:(nrun(fwd_cov))]
  fwd_yp = c(runValue(fwd_cov) ,0)
  fwd_y = stepfun(cumsum(fwd_xp),fwd_yp)(x)
  bwd_xp = runLength(bwd_cov)[1:(nrun(bwd_cov))]
  bwd_yp = c(runValue(bwd_cov),0)
  bwd_y = stepfun(cumsum(bwd_xp),bwd_yp)(x)
  fwd = data.frame(coord = x,counts = fwd_y,strand = "fwd")
  bwd = data.frame(coord = x,counts = bwd_y,strand = "bwd")
  df = rbind(fwd,bwd)
#  mm = max(c(fwd_y,bwd_y))
#  yl = 1.2 * c(0,mm)
  df$strand = factor(df$strand,levels = c("fwd","bwd"))
  peakPlot = ggplot(df,aes(coord,counts,colour = strand))+geom_line()+scale_colour_manual(values = c("red","blue"))+
    theme(legend.position = "top",text = element_text(size = 20))+xlab("genomic coordinate")
  return(peakPlot)
}  

nreads = 1000
mu = 250
p = .5
delta = 75
sigma2 = 2350
readLength = 51

peakReads = peaksim(nreads,mu,p,delta,sigma2,readLength)
pdf(file = file.path(figsdir,"peak.pdf"),width =12,height = 6)
p = plotPeak(peakReads,500)
print(p)
dev.off()
@ 


\begin{frame}
\frametitle{A typical (simulated) peak}

By repeating, we are going to get a peak that looks as:

\begin{figure}
\includegraphics[width = .8\textwidth]{figs/generated/peak.pdf}
\end{figure}

\end{frame}




\section{How to use the profile package?}
\subsection{How to input data}
\begin{frame}[t]
\frametitle{Initial parameters}

For this example we are going to load the package and parameters:

<<howtoload,include=FALSE,echo=FALSE,eval=TRUE>>=
  library(profile)
  source("../rscripts/all_functions.R")
  dir = "../data"
  dir1 = file.path(dir,"regions")
  dir2 = file.path(dir,"bam")
  peakfiles = file.path(dir1,list.files(dir1))  
  regions = lapply(peakfiles,narrowPeakToGRanges)
  
  regionName = "CTCF-K562"
  fileFormat = "bam"
  maxBandwidth = 301
  bandwidth = 151
  fragLen = 200
  remChr = "chrY"
  windowExt = 2000
  mc.cores = 7

  files = list.files(dir2)
  files = file.path(dir2,files[!grepl("bai",files)])

  # Set profile object
  ourRegions = regions[[1]]
  start(ourRegions) = regions[[1]]$summit - windowExt
  end(ourRegions) = regions[[1]]$summit + windowExt

@ 

<<outputload,include=TRUE,results = "asis">>=
  library(profile)

  regionName = "CTCF-K562"

  fileFormat = "bam"

  maxBandwidth = 301

  bandwidth = 151

  fragLen = 200

  remChr = "chrY"

  windowExt = 2000

  mc.cores = 8
@ 

\end{frame}



\begin{frame}

\frametitle{A sample of our regions}

We define our regions as:
\begin{align}
\text{start}^* = \text{summit} - \text{windowExt} \nonumber \\
\text{end}^* = \text{summit} + \text{windowExt} \nonumber 
\end{align}


<<showRegions,results="asis">>=
  kable(as.data.frame(ourRegions[1:5]),format="latex")
@ 

\end{frame}

\section{How to generate the profiles}
\begin{frame}
\frametitle{How to generate the profiles (1 of 3) }

\begin{enumerate}
\item We need to create {\color{RoyalBlue} profile} and then add regions to the  object:

<<createProfile,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  ourProfile = Profile(regionName,
    files[1],
    fileFormat,
    maxBandwidth,
    fragLen,
    remChr)

regions(ourProfile) = ourRegions
@ 

\item Then we load the reads:

<<loadProfileReads,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  ourProfile = loadReads(ourProfile,mc.cores)
@ 

\item And then match them to the regions:
<<matchProfileReads,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  ourProfile = matchReads(ourProfile,mc.cores)
@ 
\end{enumerate}


\end{frame}

\begin{frame}[fragile]
\frametitle{How to generate the profiles (2 of 3) }


\begin{enumerate}
\addtocounter{enumi}{3}
\item Calculate the coverage:

<<calcCoverage,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
ourProfile = getCoverage(ourProfile,mc.cores)
@ 

\item Calculate the profile matrix and normalize it:

<<calcProfileMatrix,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
ourProfileMatrix = ProfileMatrix(ourProfile,
  bandwidth,
  mc.cores)

ourProfileMatrix = normalize.matrix(
  ourProfileMatrix)
@ 

\end{enumerate}
\end{frame}

\begin{frame}
\frametitle{A brief note about profileMatrix}

\only<1>{
\begin{enumerate}
\item We can add column vectors to our regions:

<<addCol2,include=TRUE,echo=TRUE,eval=FALSE,results="asis",tidy=TRUE>>=
  dnaseOverlap =  countOverlaps(regions(ourProfileMatrix),
    regions[[2]])

  pol2bOverlap = countOverlaps(regions(ourProfileMatrix),
    regions[[3]])

  ourProfileMatrix = addColumn(ourProfileMatrix,
    "dnase",
    dnaseOverlap)

  elementMetadata(regions(ourProfileMatrix))[["pol2b"]] =
    pol2bOverlap


@ 

It's also possible to add a vector as {\color{Soutput} {\color{Scode} regions}(ourProfileMatrix)\$dnase {\color{Scode}=} dnaseOverlap}

\end{enumerate}
}

\only<2>{
\begin{enumerate}
\addtocounter{enumi}{1}
\item And then subseting (this method returns another {\color{RoyalBlue} profileMatrix}:

<<subsetProfileMatrix,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  subset.pm(ourProfileMatrix,dnase > 0)

  subset.pm(ourProfileMatrix,dnase > 0 | pol2b > 0)

  subset.pm(ourProfileMatrix,seqnames == "chr1")
@ 

\item Or averaging (all are coordinate-wise):

\begin{enumerate}
\item Mean

<<meanProfileMatrix,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  meanProfile(ourProfileMatrix)
@ 

\item Median
<<medianProfileMatrix,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  meanProfile(ourProfileMatrix,trim = 0.5) 
@ 

\item Trimmed mean

<<trimMpeanProfileMatrix,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  meanProfile(ourProfileMatrix,trim = .1)
@ 

\end{enumerate}


\end{enumerate}
}

\end{frame}



\begin{frame}
\frametitle{How to generate the profiles (3 of 3) }

We repeat the previous procedure for several reads files, and save all of them under {\color{RoyalBlue} ourProfileMatrices}. Then, we can convert them into a {\color{RoyalBlue} profileMatrixList}, which is the object we are going to use to plot

<<profMatrixList,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
  ourProfileMatrixList = ProfileMatrixList(

    ourProfileMatrices)
@ 

\end{frame}

\section{Examples}
\subsection{Calculating average profiles}
\begin{frame}
\frametitle{Plot examples}

\only<1>{
Base plot

<<plot1,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=

p1 =plot.profiles(ourProfileMatrices)

print(p1)

@ 

\begin{figure}[h!]
\centering
\includegraphics[width = .6\textwidth]{figs/generated/basis.pdf}
\end{figure}
}

\only<2>{
Minor format

<<plot2,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
p2 = p1 + theme(legend.position = "bottom")+ggtitle("K562 histone profile")

print(p2)
@ 

\begin{figure}[h!]
\centering
\includegraphics[width = .6\textwidth]{figs/generated/basisText.pdf}
\end{figure}

}

\only<3>{
But maybe I want other colors and solid lines:

\begin{figure}[h!]
\centering
\includegraphics[width = .75\textwidth]{figs/generated/basisfull.pdf}
\end{figure}
}

\end{frame}


\begin{frame}
\frametitle{Plot examples II}

\only<1>{
Imagine that instead, we want median profiles and relative distances

<<plot3,include=TRUE,echo=TRUE,eval=FALSE,results="asis",tidy=TRUE>>=
q1 = plot.profiles(ourProfileMatrices,trim=0.5,
  coord = seq(-windowExt,windowExt),
  condition = dnase > 0 )

q1 = q1+  theme(legend.position ="bottom")+

ggtitle("K562 histone profile")+

 ylab("normalized counts")+

 xlab("distance from summit")


print(q1)
@ 
}

\only<2>{
\begin{figure}[h!]
\centering
\includegraphics[width = .65\textwidth]{figs/generated/medianprofile.pdf}
\end{figure}

}

\only<3>{
Using {\color{Scode} scale\_linetype\_manual} and {\color{Scode} geom\_vline} we can add more effects:

\begin{figure}[h]
\centering
\includegraphics[width = .55\textwidth]{figs/generated/medianprofileExtra.pdf}
\end{figure}
}

\end{frame}

\subsection{Plotting peaks}
\begin{frame}
\frametitle{How to plot peaks}

For this example it's possible to follow the {\color{RoyalBlue} Script\_problematic\_peaks.R'} file in rscripts. For which we obtain a {\color{RoyalBlue} profileMatrixList} with all the samples:

To plot all peaks, we can do a {\color{Scode} for} looping instructions as:

{\color{Scode} for}( i in  {\color{RoyalBlue}} {\color{magenta} 1:n} )\{
<<plotPeaksAll,include=TRUE,echo=TRUE,eval=FALSE,results="asis">>=
p = plot.profiles(profileMatrices,

condition = start == starts[i])+

ggtitle(paste0("U00096.2:",starts[i],"-",ends[i]))

print(p)
@ 
\}

\end{frame}

\begin{frame}[t]
\frametitle{Some particular peak examples}

\only<1>
{
\begin{figure}[h]
\centering
\includegraphics[width = 0.85\textwidth,page = 3]{figs/generated/ProblematicPeaks.pdf}
\end{figure}

}

\only<2>
{
\begin{figure}[h]
\centering
\includegraphics[width = 0.85\textwidth,page = 5]{figs/generated/ProblematicPeaks.pdf}
\end{figure}

}

\only<3>
{
\begin{figure}[h]
\centering
\includegraphics[width = 0.85\textwidth,page = 20]{figs/generated/ProblematicPeaks.pdf}
\end{figure}

}

\end{frame}


\begin{frame}[fragile]
\frametitle{Final remarks}

\onslide<1->{
The source for the slides are in {\color{RoyalBlue} \url{https://github.com/welch16/profile_slides}}

The package is in {\color{RoyalBlue} \url{https://github.com/welch16/profile}}, 

or 

{\color{Scode} devtools}::{\color{Scode} install\_github}(repo = {\color{RoyalBlue}'profile'},user = {\color{RoyalBlue}'welch16'})
}

\onslide<2>{
\vspace{1 cm}
\begin{center}
{\color{RoyalBlue} {\Huge Thank you very much}}
\end{center}
}

\end{frame}


\end{document}
